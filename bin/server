#!/usr/bin/env node
'use strict';

var http = require('http');
var path = require('path');
var url = require('url');
var fs = require('fs');
//var S = require('string');
//var async = require('async');
var _ = require('lodash');
var soap = require('soap');

// mock data generated by mockaroo.com
var products = require('../data/products.json');
var productsById = {};
_.each(products, function(p) { productsById[p.id] = p; });

var soapPort = process.env.SOAP_PORT || 3000;
var soapBaseAddress = process.env.SOAP_BASE_ADDRESS || 'http://0.0.0.0:' + soapPort;
var timeout = process.env.TIMEOUT || 20 * 60 * 1000; // 20mins



var rawWsdl = {};
rawWsdl.inventory = fs.readFileSync(path.resolve(__dirname, '..', 'wsdl', 'inventory.wsdl'), 'utf8');

var wsdl = {};
wsdl.inventory = rawWsdl.inventory.replace(/{{baseAddress}}/g, soapBaseAddress);



var toSoapError = function(err) {
  console.error(err);

  return {
    Fault: {
      Code: {
        Value: "soap:Sender"
        //, Subcode: { value: "soap:Error" }
      },
      Reason: { Text: err.soapText || err.message || err.toString() }
    }
  };
};



// prepare SOAP server
var server = http.createServer(function(req, res) {
  var parsedUrl = url.parse(req.url);

  if (parsedUrl.pathname === '/') {
    res.writeHead(200, { 'Content-Type': 'application/json' });

    res.write(JSON.stringify([
      '/InventoryService/InventoryPort'
    ], null, 2));

    /*res.setHeader('Content-Type', 'application/xml');

    var tailoredWsdl = wsdl;

    if (!process.env.SOAP_BASE_ADDRESS) {
      tailoredWsdl = rawWsdl.replace(/{{baseAddress}}/g, 'http://' + req.headers.host);
    }

    res.write(tailoredWsdl);*/
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });

    res.write('Not Found: ' + req.url);
  }

  res.end();
});

server.setTimeout(timeout);
server.log = console.log;
server.on('error', function(err) {
  if (err) throw err;
});



// register SOAP endpoints for inventory service
var checkAvailability = function(input, callback) {
  if (!input || !input.product || !input.product.id) return callback(new Error('product ID missing'));

  var output = {
    product: _.clone(productsById[input.product.id]),
    status: {}
  };

  if (output.product.available) output.status.currentAvailability = 'available';
  else output.status.currentAvailability = 'not available';

  output.status.availableAgainInDays = output.product.days;

  delete output.product.available;
  delete output.product.days;

  setTimeout(function() {
    callback(null, output);
  }, 10 * 1000); // delay response: 10 seconds
};

var inventoryPort = { InventoryService: {} };

inventoryPort.InventoryService.InventoryPort = {
  checkAvailability: function(input, callback, headers) {
    checkAvailability(input, function(err, output) {
      if (err) throw toSoapError(err);

      callback(output);
    });
  },
  checkAvailabilityAsync: function(input, callback, headers) {
    if (!input || !input.callbackUrl || !input.callbackUrl) throw toSoapError(new Error('callback URL missing'));

    checkAvailability(input, function(err, output) {
      if (err) return console(err);

      soap.createClient(input.callbackUrl + '?wsdl', function(err, client) {
        if (err) return console(err);

        client.onFinishCheckAvailability(output, function(err, result) {
          if (err) return console(err);

          //console.log(result);
        });
      });
    });

    callback();
  },
  listProducts: function(input, callback, headers) {
    //if (err) throw toSoapError(err);

    input = input || {};

    if (input.limit) input.limit = parseInt(input.limit);

    var count = 0;

    var output = { list: { product: [] } };

    _.each(products, function(p) {
      if (_.isNumber(input.limit) && input.limit <= count) return;

      p = _.clone(p);

      delete p.available;
      delete p.days;

      output.list.product.push(p);

      count++;
    });

    callback(output);
  }
};

soap.listen(server, '/InventoryService/InventoryPort', inventoryPort, wsdl.inventory);



// init SOAP server
server.listen(soapPort, function(err) {
  if (err) throw err;
});

console.log('server listening on port ' + soapPort);
